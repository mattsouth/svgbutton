// Generated by CoffeeScript 1.7.1
var SVGButton, root;

SVGButton = (function() {
  function SVGButton(parent) {
    this.parent = parent;
  }

  SVGButton.prototype.updateFill = function(id, fill) {
    return d3.select('#' + id).style("fill", fill);
  };

  SVGButton.prototype.addButtonBehaviours = function(elem, hoverfill, unhoverfill, action) {
    return elem.attr("onmouseover", "this.style.fill='" + hoverfill + "'").attr("onmouseout", "this.style.fill='" + unhoverfill + "'").attr("onmouseup", action).attr("ontouchend", "this.style.fill='" + unhoverfill + "'");
  };

  SVGButton.prototype.addButtonBehavioursForId = function(elem, id, hoverfill, unhoverfill, action) {
    return elem.attr("onmouseover", "updateFill(" + id + ",'" + hoverfill + "')").attr("onmouseout", "updateFill(" + id + ",'" + unhoverfill + "')").attr("onmouseup", action).attr("ontouchend", "updateFill(" + id + ",'" + unhoverfill + "')");
  };

  SVGButton.prototype.createRect = function(id, x, y, action, opt) {
    var key, rect, val, _ref, _results;
    rect = d3.select(this.parent).append("rect").attr("id", id).attr("x", x).attr("y", y);
    this.addButtonBehaviours(rect, opt.hover, opt.rect.fill, action);
    _ref = opt.rect;
    _results = [];
    for (key in _ref) {
      val = _ref[key];
      _results.push(rect.attr(key, val));
    }
    return _results;
  };

  SVGButton.prototype.makeTextButton = function(id, x, y, text, action) {
    var elem, rect;
    rect = this.createRect(id, x, y, action, opt);
    elem = d3.select(this.parent).append("text").attr("id", id + "text").attr("x", x + 2).attr("y", y + 2);
    return this.addButtonBehavioursForId(elem, id, 'lightgrey', 'none', action);
  };

  SVGButton.prototype.makeButton = function(id, x, y, action, options) {
    if (options == null) {
      options = {
        rect: {
          width: 30,
          height: 30,
          rx: 5,
          ry: 5,
          'stroke-width': 2,
          stroke: 'grey',
          fill: 'none'
        },
        hover: 'lightgrey'
      };
    }
    return this.createRect(id, x, y, action, options);
  };


  /*
  drawPauseButton: (id, x, y) ->
      @drawButton(id, "action", x, y, "doAction()");
      d3.select(id).append("path")
          .attr("id","pause").attr("fill","grey").attr("onmouseover","fillButton('action','none')")
          .attr("d","M#{x+7} #{y+6}L#{x+7} #{y+24}L#{x+13} #{y+24}L#{x+13} #{y+6} L#{x+7} #{y+6} M#{x+17} #{y+6} L#{x+17} #{y+24} L#{x+23} #{y+24} L#{x+23} #{y+6} L#{x+17} #{y+6}")
          .attr("onmouseover","fillButton('action','lightgrey')").attr("onmouseout","fillButton('action','none')")
          .attr("onmouseup","doAction()").attr("ontouchend","fillButton('action','none')")
      d3.select(id).append("path")
          .attr("id","resume").attr("fill","grey").attr("onmouseover","fillButton('action','none')")
          .attr("class","invisible").attr("d","M#{x+11} #{y+6} L#{x+21} #{y+15} L#{x+11} #{y+22} Z")
          .attr("onmouseover","fillButton('action','lightgrey')").attr("onmouseout","fillButton('action','none')")
          .attr("onmouseup","doAction()").attr("ontouchend","fillButton('action','none')")
  
  drawRestartButton: (id, x, y) ->
      @drawButton(id, "restart", x, y, "track.clear()");
      d3.select(id).append("path")
          .attr("fill","none").attr("stroke","grey").attr("stroke-width",5)
          .attr("onmouseover","fillButton('action','none')")
          .attr("d","M #{x+23} #{y+15} a 8 8 0 1 1 -8 -8")
          .attr("onmouseover","fillButton('restart','lightgrey')").attr("onmouseout","fillButton('restart','none')")
          .attr("onmouseup","track.clear()").attr("ontouchend","fillButton('restart','none')")
      d3.select(id).append("path")
          .attr("fill","grey").attr("onmouseover","fillButton('action','none')")
          .attr("d","M#{x+15} #{y+2} L#{x+21} #{y+7} L#{x+15} #{y+12} Z")
          .attr("onmouseover","fillButton('restart','lightgrey')").attr("onmouseout","fillButton('restart','none')")
          .attr("onmouseup","track.clear()").attr("ontouchend","fillButton('restart','none')")
   */


  /*
  var generator = new SVGButtonMaker('track-canvas')
  generator.makeStatefulButton('pause', svgbbox.width-90, svgbbox.height-45, [
      { path:'L7 24 L13 24 L13 6 L7 6 M17 6 L17 24 L23 24 L23 6 L17 6', action:'startGenerator(track)' }
      { path:'L7 24 L13 24 L13 6 L7 6 M17 6 L17 24 L23 24 L23 6 L17 6', action:'stopGenerator()' }
  ]);
  generator.makeButton('restart', svgbbox.width-45, svgbbox.height-45, 'track.clear()', {
      path: [
          { fill:'none', stroke:'grey', stroke-width:5, d:'M23 14a 8 8 0 1 1 -8 -8' },
          { fill:'grey', d:'M15 2L21 7L15 12Z' }
      ]
  });
   */

  return SVGButton;

})();

root = typeof exports !== "undefined" && exports !== null ? exports : window;

root.SVGButton = SVGButton;
