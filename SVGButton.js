// Generated by CoffeeScript 1.7.1
var SVGButton, root;

SVGButton = (function() {
  var addButtonBehaviours, addButtonBehavioursForId, merge, typeIsArray;

  function SVGButton(parent) {
    this.parent = parent;
    this.rectDefaults = {
      width: 30,
      height: 30,
      rx: 5,
      ry: 5,
      'stroke-width': 2,
      stroke: 'grey',
      fill: 'none'
    };
    this.textDefaults = {
      stroke: 'grey',
      fill: 'none',
      'font-family': 'sans-serif',
      fill: 'grey',
      'font-size': 14
    };
    this.pathDefaults = {
      width: 30,
      height: 30,
      rx: 5,
      ry: 5,
      'stroke-width': 2,
      stroke: 'grey',
      fill: 'none'
    };
  }

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  merge = function(defaults, opts) {
    var key, result, value;
    result = {};
    for (key in defaults) {
      value = defaults[key];
      if (value === Object(value)) {
        if (opts[key] != null) {
          result[key] = merge(value, opts[key]);
        } else {
          result[key] = value;
        }
      } else {
        if (opts[key] != null) {
          result[key] = opts[key];
        } else {
          result[key] = value;
        }
      }
    }
    return result;
  };

  addButtonBehaviours = function(elem, hoverfill, unhoverfill, action) {
    return elem.attr("onmouseover", "this.style.fill='" + hoverfill + "'").attr("onmouseout", "this.style.fill='" + unhoverfill + "'").attr("onmouseup", action).attr("ontouchend", "this.style.fill='" + unhoverfill + "'");
  };

  addButtonBehavioursForId = function(elem, id, hoverfill, unhoverfill, action) {
    return elem.attr("onmouseover", "d3.select('#" + id + "').style('fill','" + hoverfill + "')").attr("onmouseout", "d3.select('#" + id + "').style('fill','" + unhoverfill + "')").attr("onmouseup", action).attr("ontouchend", "d3.select('#" + id + "').style('fill','" + unhoverfill + "')");
  };

  SVGButton.prototype.createRect = function(id, x, y, action, opts) {
    var key, rect, val, _ref;
    rect = d3.select(this.parent).append("rect").attr("id", id).attr("x", x).attr("y", y);
    addButtonBehaviours(rect, opts.hover, opts.rect.fill, action);
    _ref = opts.rect;
    for (key in _ref) {
      val = _ref[key];
      rect.attr(key, val);
    }
    return rect;
  };

  SVGButton.prototype.createText = function(id, x, y, text, action, opts) {
    var elem, key, val, _ref;
    elem = d3.select(this.parent).append("text").text(text).attr("id", id).attr("x", x).attr("y", y);
    addButtonBehaviours(elem, opts.hover, opts.text.fill, action);
    _ref = opts.text;
    for (key in _ref) {
      val = _ref[key];
      elem.attr(key, val);
    }
    return elem;
  };

  SVGButton.prototype.createPath = function(id, x, y, path, opts) {
    var elem, key, val, _ref;
    elem = d3.select(this.parent).append("path").attr("d", path).attr("transform", "translate(" + x + "," + y + ")").attr("id", id);
    _ref = opts.path;
    for (key in _ref) {
      val = _ref[key];
      elem.attr(key, val);
    }
    return elem;
  };

  SVGButton.prototype.makeTextButton = function(id, x, y, text, action, opts) {
    var elem, mergedOpts;
    if (opts == null) {
      opts = {};
    }
    mergedOpts = merge({
      rect: this.rectDefaults,
      text: this.textDefaults,
      hover: 'lightgrey'
    }, opts);
    elem = this.createText(id + "text", x + 2, y + 2, text, action, mergedOpts);
    return console.log(elem);
  };

  SVGButton.prototype.makeButton = function(id, x, y, action, opts) {
    var mergedOpts;
    if (opts == null) {
      opts = {};
    }
    mergedOpts = merge({
      rect: this.rectDefaults,
      hover: 'lightgrey'
    }, opts);
    return this.createRect(id, x, y, action, mergedOpts);
  };

  SVGButton.prototype.makePathButton = function(id, x, y, path, action, opts) {
    var elem, mergedOpts;
    if (opts == null) {
      opts = {};
    }
    mergedOpts = merge({
      rect: this.rectDefaults,
      path: this.pathDefaults,
      hover: 'lightgrey'
    }, opts);
    this.createRect(id, x, y, action, mergedOpts);
    elem = this.createPath(id + "path", x, y, path, mergedOpts);
    return addButtonBehavioursForId(elem, id, mergedOpts.hover, mergedOpts.path.fill, action);
  };


  /*
  var generator = new SVGButtonMaker('track-canvas')
  generator.makeStatefulButton('pause', svgbbox.width-90, svgbbox.height-45, [
      { path:'L7 24 L13 24 L13 6 L7 6 M17 6 L17 24 L23 24 L23 6 L17 6', action:'startGenerator(track)' }
      { path:'L7 24 L13 24 L13 6 L7 6 M17 6 L17 24 L23 24 L23 6 L17 6', action:'stopGenerator()' }
  ]);
  generator.makeButton('restart', svgbbox.width-45, svgbbox.height-45, 'track.clear()', {
      path: [
          { fill:'none', stroke:'grey', stroke-width:5, d:'M23 14a 8 8 0 1 1 -8 -8' },
          { fill:'grey', d:'M15 2L21 7L15 12Z' }
      ]
  });
   */

  return SVGButton;

})();

root = typeof exports !== "undefined" && exports !== null ? exports : window;

root.SVGButton = SVGButton;
